---sql-- col- table rep_report - create the @entity class
    REPORT_ID	NUMBER
    REPORT_TYPE_CD	VARCHAR2
    REPORT_NAME	VARCHAR2
    REMOVAL_DATE	DATE
    LT_LIST_CLASS_CD	VARCHAR2
    LT_LIST_ID1	VARCHAR2
    AS_OF_DATE1	DATE
    LT_LIST_INT_ID1	NUMBER
    VERSION_CD1	VARCHAR2
    LT_LIST_ID2	VARCHAR2
    AS_OF_DATE2	DATE
    LT_LIST_INT_ID2	NUMBER
    VERSION_CD2	VARCHAR2
    LAYOUT_TYPE_CD	VARCHAR2
    LAYOUT_ID	VARCHAR2
    OUTPUT_FILE_TYPE_CD	VARCHAR2
    REQUEST_PRIORITY	NUMBER
    REQUEST_PROGRAM	VARCHAR2
    CUSTOMER_ID	VARCHAR2
    REQUEST_USER	VARCHAR2
    PROCESS_TIME	DATE
    START_TIMESTAMP	DATE
    FINISH_TIMESTAMP	DATE
    STATUS_CD	VARCHAR2
    SERVICE_ID	VARCHAR2
    FILE_PATHNAME	VARCHAR2
    EMAIL_ADDRESS	VARCHAR2
    MESSAGES	VARCHAR2
    REC_CREATE_TIMESTAMP	DATE
    REC_CREATE_USERID	VARCHAR2
    LAST_UPD_TIMESTAMP	DATE
    LAST_UPD_USERID	VARCHAR2
    CARRIER_ID1	VARCHAR2
    ACCOUNT_ID1	VARCHAR2
    GROUP_ID1	VARCHAR2
    CARRIER_ID2	VARCHAR2
    ACCOUNT_ID2	VARCHAR2
    GROUP_ID2	VARCHAR2
    STORED_QUERY_INT_ID	NUMBER
    DOWNLOAD_CNT	NUMBER
    SCHEDULE_IND	VARCHAR2
    IMPORT_FILE_PATH	VARCHAR2
    ADDTNL_ALPHA_INFO	VARCHAR2
    ADDTNL_NUMERIC_INFO	NUMBER
    INVENTORY_ID	NUMBER
    EXP_REQID	NUMBER

============================
// Main Application Class
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}

// Entity Class
package com.example.demo.entity;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "rep_report")
public class Report {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "REPORT_ID")
    private Long reportId;

    @Column(name = "REPORT_TYPE_CD")
    private String reportTypeCd;

    @Column(name = "REPORT_NAME")
    private String reportName;

    @Column(name = "REMOVAL_DATE")
    private Date removalDate;

    @Column(name = "LT_LIST_CLASS_CD")
    private String ltListClassCd;

    @Column(name = "LT_LIST_ID1")
    private String ltListId1;

    @Column(name = "AS_OF_DATE1")
    private Date asOfDate1;

    @Column(name = "LT_LIST_INT_ID1")
    private Long ltListIntId1;

    @Column(name = "VERSION_CD1")
    private String versionCd1;

    @Column(name = "LT_LIST_ID2")
    private String ltListId2;

    @Column(name = "AS_OF_DATE2")
    private Date asOfDate2;

    @Column(name = "LT_LIST_INT_ID2")
    private Long ltListIntId2;

    @Column(name = "VERSION_CD2")
    private String versionCd2;

    @Column(name = "LAYOUT_TYPE_CD")
    private String layoutTypeCd;

    @Column(name = "LAYOUT_ID")
    private String layoutId;

    @Column(name = "OUTPUT_FILE_TYPE_CD")
    private String outputFileTypeCd;

    @Column(name = "REQUEST_PRIORITY")
    private Integer requestPriority;

    @Column(name = "REQUEST_PROGRAM")
    private String requestProgram;

    @Column(name = "CUSTOMER_ID")
    private String customerId;

    @Column(name = "REQUEST_USER")
    private String requestUser;

    @Column(name = "PROCESS_TIME")
    private Date processTime;

    @Column(name = "START_TIMESTAMP")
    private Date startTimestamp;

    @Column(name = "FINISH_TIMESTAMP")
    private Date finishTimestamp;

    @Column(name = "STATUS_CD")
    private String statusCd;

    @Column(name = "SERVICE_ID")
    private String serviceId;

    @Column(name = "FILE_PATHNAME")
    private String filePathname;

    @Column(name = "EMAIL_ADDRESS")
    private String emailAddress;

    @Column(name = "MESSAGES")
    private String messages;

    @Column(name = "REC_CREATE_TIMESTAMP")
    private Date recCreateTimestamp;

    @Column(name = "REC_CREATE_USERID")
    private String recCreateUserid;

    @Column(name = "LAST_UPD_TIMESTAMP")
    private Date lastUpdTimestamp;

    @Column(name = "LAST_UPD_USERID")
    private String lastUpdUserid;

    @Column(name = "CARRIER_ID1")
    private String carrierId1;

    @Column(name = "ACCOUNT_ID1")
    private String accountId1;

    @Column(name = "GROUP_ID1")
    private String groupId1;

    @Column(name = "CARRIER_ID2")
    private String carrierId2;

    @Column(name = "ACCOUNT_ID2")
    private String accountId2;

    @Column(name = "GROUP_ID2")
    private String groupId2;

    @Column(name = "STORED_QUERY_INT_ID")
    private Long storedQueryIntId;

    @Column(name = "DOWNLOAD_CNT")
    private Integer downloadCnt;

    @Column(name = "SCHEDULE_IND")
    private String scheduleInd;

    @Column(name = "IMPORT_FILE_PATH")
    private String importFilePath;

    @Column(name = "ADDTNL_ALPHA_INFO")
    private String addtnlAlphaInfo;

    @Column(name = "ADDTNL_NUMERIC_INFO")
    private Long addtnlNumericInfo;

    @Column(name = "INVENTORY_ID")
    private Long inventoryId;

    @Column(name = "EXP_REQID")
    private Long expReqId;

    // Getters and Setters
    // (Auto-generate getters and setters for all fields using your IDE or tools like Lombok if available)
}






=================================
// Main Application Class
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}

// Entity Class
package com.example.demo.entity;

import jakarta.persistence.*;

@Entity
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    private String department;

    private Double salary;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDepartment() {
        return department;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    public Double getSalary() {
        return salary;
    }

    public void setSalary(Double salary) {
        this.salary = salary;
    }
}

// Repository Interface
package com.example.demo.repository;

import com.example.demo.entity.Employee;
import org.springframework.data.jpa.repository.JpaRepository;

public interface EmployeeRepository extends JpaRepository<Employee, Long> {
}

// Service Layer
package com.example.demo.service;

import com.example.demo.entity.Employee;
import com.example.demo.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class EmployeeService {
    @Autowired
    private EmployeeRepository employeeRepository;

    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    public Optional<Employee> getEmployeeById(Long id) {
        return employeeRepository.findById(id);
    }

    public Employee saveEmployee(Employee employee) {
        return employeeRepository.save(employee);
    }

    public void deleteEmployee(Long id) {
        employeeRepository.deleteById(id);
    }
}

// Controller Layer
package com.example.demo.controller;

import com.example.demo.entity.Employee;
import com.example.demo.service.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/employees")
public class EmployeeController {
    @Autowired
    private EmployeeService employeeService;

    @GetMapping
    public List<Employee> getAllEmployees() {
        return employeeService.getAllEmployees();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {
        return employeeService.getEmployeeById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public Employee createEmployee(@RequestBody Employee employee) {
        return employeeService.saveEmployee(employee);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Employee> updateEmployee(@PathVariable Long id, @RequestBody Employee employeeDetails) {
        return employeeService.getEmployeeById(id)
                .map(employee -> {
                    employee.setName(employeeDetails.getName());
                    employee.setDepartment(employeeDetails.getDepartment());
                    employee.setSalary(employeeDetails.getSalary());
                    return ResponseEntity.ok(employeeService.saveEmployee(employee));
                })
                .orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteEmployee(@PathVariable Long id) {
        if (employeeService.getEmployeeById(id).isPresent()) {
            employeeService.deleteEmployee(id);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.notFound().build();
    }
}

// application.properties
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle12cDialect

// pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>demo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>demo</name>
    <description>Demo project for Spring Boot</description>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.1</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <java.version>17</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc8</artifactId>
            <version>19.8.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
